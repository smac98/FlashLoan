import type { CypherEnvironment } from "../Environment";
import type { Expr } from "../types";
import type { Literal } from "../variables/Literal";
import type { Variable } from "../variables/Variable";
import { Clause } from "./Clause";
import { WithOrder } from "./mixins/WithOrder";
import { WithReturn } from "./mixins/WithReturn";
export declare type WithProjection = Variable | [Expr, string | Variable | Literal];
export declare class With extends Clause {
    private projection;
    private isDistinct;
    constructor(...columns: Array<"*" | WithProjection>);
    addColumns(...columns: Array<"*" | WithProjection>): this;
    distinct(): this;
    getCypher(env: CypherEnvironment): string;
}
export interface With extends WithOrder, WithReturn {
}
//# sourceMappingURL=With.d.ts.map