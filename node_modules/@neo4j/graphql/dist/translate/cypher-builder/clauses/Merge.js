"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Merge = void 0;
const NodeRef_1 = require("../variables/NodeRef");
const Pattern_1 = require("../Pattern");
const Clause_1 = require("./Clause");
const OnCreate_1 = require("./sub-clauses/OnCreate");
const WithReturn_1 = require("./mixins/WithReturn");
const apply_mixin_1 = require("./utils/apply-mixin");
class Merge extends Clause_1.Clause {
    constructor(element, params = {}) {
        super();
        const addLabels = element instanceof NodeRef_1.NodeRef;
        const addLabelsOption = { labels: addLabels };
        this.pattern = new Pattern_1.Pattern(element, {
            source: addLabelsOption,
            target: addLabelsOption,
        }).withParams(params);
        this.onCreateClause = new OnCreate_1.OnCreate(this);
    }
    onCreate(...onCreateParams) {
        this.onCreateClause.addParams(...onCreateParams);
        return this;
    }
    getCypher(env) {
        const mergeStr = `MERGE ${this.pattern.getCypher(env)}`;
        const onCreateStatement = this.onCreateClause.getCypher(env);
        const separator = onCreateStatement ? "\n" : "";
        let returnCypher = "";
        if (this.returnStatement) {
            returnCypher = `\n${this.returnStatement.getCypher(env)}`;
        }
        return `${mergeStr}${separator}${onCreateStatement}${returnCypher}`;
    }
}
exports.Merge = Merge;
(0, apply_mixin_1.applyMixins)(Merge, [WithReturn_1.WithReturn]);
//# sourceMappingURL=Merge.js.map