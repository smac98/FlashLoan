"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Call = void 0;
const Clause_1 = require("./Clause");
const utils_1 = require("../utils/utils");
const ImportWith_1 = require("./sub-clauses/ImportWith");
const apply_mixin_1 = require("./utils/apply-mixin");
const WithReturn_1 = require("./mixins/WithReturn");
class Call extends Clause_1.Clause {
    constructor(subQuery) {
        super();
        const rootQuery = subQuery.getRoot();
        this.addChildren(rootQuery);
        this.subQuery = rootQuery;
    }
    with(...params) {
        if (this.importWith)
            throw new Error("Call import already set");
        this.importWith = new ImportWith_1.ImportWith(this, params);
        return this;
    }
    getCypher(env) {
        const subQueryStr = this.subQuery.getCypher(env);
        const withCypher = (0, utils_1.compileCypherIfExists)(this.importWith, env, { suffix: "\n" });
        const returnCypher = (0, utils_1.compileCypherIfExists)(this.returnStatement, env, { prefix: "\n" });
        const inCallBlock = `${withCypher}${subQueryStr}`;
        return `CALL {\n${(0, utils_1.padBlock)(inCallBlock)}\n}${returnCypher}`;
    }
}
exports.Call = Call;
(0, apply_mixin_1.applyMixins)(Call, [WithReturn_1.WithReturn]);
//# sourceMappingURL=Call.js.map