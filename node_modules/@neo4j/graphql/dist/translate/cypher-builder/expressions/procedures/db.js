"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FullTextQueryNodes = void 0;
const graphql_compose_1 = require("graphql-compose");
const Where_1 = require("../../clauses/sub-clauses/Where");
const Clause_1 = require("../../clauses/Clause");
const WithReturn_1 = require("../../clauses/mixins/WithReturn");
const apply_mixin_1 = require("../../clauses/utils/apply-mixin");
class FullTextQueryNodes extends Clause_1.Clause {
    constructor(targetNode, indexName, phrase, parent) {
        super(parent);
        this.targetNode = targetNode;
        this.indexName = indexName;
        this.phrase = phrase;
    }
    where(input) {
        if (!this.whereClause) {
            const whereStatement = new Where_1.Where(this, input);
            this.addChildren(whereStatement);
            this.whereClause = whereStatement;
        }
        else {
            this.whereClause.and(input);
        }
        return this;
    }
    getCypher(env) {
        const targetId = env.getVariableId(this.targetNode);
        const whereStr = this.whereClause?.getCypher(env) || "";
        const returnStr = this.returnStatement?.getCypher(env) || "";
        const textSearchStr = (0, graphql_compose_1.dedent) `CALL db.index.fulltext.queryNodes(
            "${this.indexName}",
            ${this.phrase.getCypher(env)}
        ) YIELD node as ${targetId}`;
        return `${textSearchStr}\n
            ${whereStr}\n
            ${returnStr}
        `;
    }
}
exports.FullTextQueryNodes = FullTextQueryNodes;
(0, apply_mixin_1.applyMixins)(FullTextQueryNodes, [WithReturn_1.WithReturn]);
//# sourceMappingURL=db.js.map