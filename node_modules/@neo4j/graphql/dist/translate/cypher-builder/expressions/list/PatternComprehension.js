"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatternComprehension = void 0;
const WithWhere_1 = require("../../clauses/mixins/WithWhere");
const apply_mixin_1 = require("../../clauses/utils/apply-mixin");
const CypherASTNode_1 = require("../../CypherASTNode");
const Pattern_1 = require("../../Pattern");
const utils_1 = require("../../utils/utils");
class PatternComprehension extends CypherASTNode_1.CypherASTNode {
    constructor(pattern, mapExpr) {
        super();
        if (pattern instanceof Pattern_1.Pattern) {
            this.pattern = pattern;
        }
        else {
            this.pattern = new Pattern_1.Pattern(pattern);
        }
        this.mapExpr = mapExpr;
    }
    getCypher(env) {
        const whereStr = (0, utils_1.compileCypherIfExists)(this.whereSubClause, env, { prefix: " " });
        const mapStr = (0, utils_1.compileCypherIfExists)(this.mapExpr, env, { prefix: " | " });
        const patternStr = this.pattern.getCypher(env);
        return `[${patternStr}${whereStr}${mapStr}]`;
    }
}
exports.PatternComprehension = PatternComprehension;
(0, apply_mixin_1.applyMixins)(PatternComprehension, [WithWhere_1.WithWhere]);
//# sourceMappingURL=PatternComprehension.js.map