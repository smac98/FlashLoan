import type { Variable } from "./variables/Variable";
import type { PropertyRef } from "./expressions/PropertyRef";
import type { CypherFunction } from "./expressions/functions/CypherFunction";
import type { Literal } from "./variables/Literal";
import type { Exists } from "./expressions/Exists";
import type { CypherEnvironment } from "./Environment";
import type { MapExpr } from "./expressions/map/MapExpr";
import type { BooleanOp } from "./expressions/operations/boolean";
import type { ComparisonOp } from "./expressions/operations/comparison";
import type { RawCypher } from "./clauses/RawCypher";
import type { PredicateFunction } from "./expressions/functions/PredicateFunctions";
import type { RunFirstColumn, ValidatePredicate } from "./expressions/procedures/apoc/apoc";
import type { Case } from "./expressions/Case";
import type { MathOp } from "./expressions/operations/math";
import type { ListComprehension } from "./expressions/list/ListComprehension";
import type { PatternComprehension } from "./expressions/list/PatternComprehension";
import type { MapProjection } from "./CypherBuilder";
export declare type Operation = BooleanOp | ComparisonOp | MathOp;
export declare type Expr = Operation | Variable | PropertyRef | CypherFunction | Literal | Predicate | ListComprehension | PatternComprehension | MapExpr | MapProjection | RunFirstColumn;
/** Represents a predicate statement (i.e returns a boolean). Note that RawCypher is only added for compatibility */
export declare type Predicate = BooleanOp | ComparisonOp | RawCypher | Exists | PredicateFunction | ValidatePredicate | Literal<boolean> | Case;
export declare type CypherResult = {
    cypher: string;
    params: Record<string, string>;
};
/** Defines the interface for a class that can be compiled into Cypher */
export interface CypherCompilable {
    getCypher(env: CypherEnvironment): string;
}
//# sourceMappingURL=types.d.ts.map