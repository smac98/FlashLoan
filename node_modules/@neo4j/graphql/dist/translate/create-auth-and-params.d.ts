import type { Node } from "../classes";
import type { AuthOperations, BaseField, Context } from "../types";
import * as CypherBuilder from "./cypher-builder/CypherBuilder";
interface Allow {
    varName: string | CypherBuilder.Node;
    parentNode: Node;
    chainStr?: string;
}
interface Bind {
    varName: string | CypherBuilder.Node;
    parentNode: Node;
    chainStr?: string;
}
interface Where {
    varName: string | CypherBuilder.Node;
    node: Node;
    chainStr?: string;
}
export declare function createAuthAndParams({ entity, operations, skipRoles, skipIsAuthenticated, allow, context, escapeQuotes, bind, where, }: {
    entity: Node | BaseField;
    operations?: AuthOperations | AuthOperations[];
    skipRoles?: boolean;
    skipIsAuthenticated?: boolean;
    allow?: Allow;
    context: Context;
    escapeQuotes?: boolean;
    bind?: Bind;
    where?: Where;
}): [string, Record<string, any>];
export declare function createAuthPredicates({ entity, operations, skipRoles, skipIsAuthenticated, allow, context, escapeQuotes, bind, where, }: {
    entity: Node | BaseField;
    operations?: AuthOperations | AuthOperations[];
    skipRoles?: boolean;
    skipIsAuthenticated?: boolean;
    allow?: Allow;
    context: Context;
    escapeQuotes?: boolean;
    bind?: Bind;
    where?: Where;
}): CypherBuilder.Predicate | undefined;
export {};
//# sourceMappingURL=create-auth-and-params.d.ts.map