"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCountExpression = void 0;
const get_relationship_direction_1 = require("../../utils/get-relationship-direction");
const CypherBuilder = __importStar(require("../cypher-builder/CypherBuilder"));
const create_where_predicate_1 = require("../where/create-where-predicate");
function createCountExpression({ sourceNode, relationAggregationField, referenceNode, context, field, authCallWhere, targetNode, }) {
    const relationship = new CypherBuilder.Relationship({
        source: sourceNode,
        target: targetNode,
        type: relationAggregationField.type,
    });
    const direction = (0, get_relationship_direction_1.getRelationshipDirection)(relationAggregationField, {
        directed: field.args.directed,
    });
    if (direction === "IN")
        relationship.reverse();
    const relationshipPattern = relationship.pattern({
        directed: !(direction === "undirected"),
    });
    const wherePredicate = (0, create_where_predicate_1.createWherePredicate)({
        element: referenceNode,
        context,
        whereInput: field.args.where || {},
        targetElement: targetNode,
    });
    const patternComprehension = new CypherBuilder.PatternComprehension(relationshipPattern, targetNode);
    if (wherePredicate) {
        patternComprehension.where(wherePredicate);
    }
    if (authCallWhere) {
        patternComprehension.and(authCallWhere);
    }
    return CypherBuilder.size(patternComprehension);
}
exports.createCountExpression = createCountExpression;
//# sourceMappingURL=create-count-expression.js.map