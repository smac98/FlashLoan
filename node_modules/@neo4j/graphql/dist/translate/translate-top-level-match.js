"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateTopLevelMatch = void 0;
const create_auth_and_params_1 = require("./create-auth-and-params");
const CypherBuilder = __importStar(require("./cypher-builder/CypherBuilder"));
const create_where_predicate_1 = require("./where/create-where-predicate");
function translateTopLevelMatch({ node, context, varName, operation, }) {
    const { resolveTree } = context;
    const whereInput = resolveTree.args.where;
    const fulltextInput = (resolveTree.args.fulltext || {});
    const matchNode = new CypherBuilder.NamedNode(varName, { labels: node.getLabels(context) });
    let matchQuery;
    if (Object.entries(fulltextInput).length) {
        // This is only for fulltext search
        if (Object.entries(fulltextInput).length > 1) {
            throw new Error("Can only call one search at any given time");
        }
        const [indexName, indexInput] = Object.entries(fulltextInput)[0];
        const phraseParam = new CypherBuilder.Param(indexInput.phrase);
        matchQuery = new CypherBuilder.db.FullTextQueryNodes(matchNode, indexName, phraseParam);
        const labelsChecks = node.getLabels(context).map((label) => {
            return CypherBuilder.in(new CypherBuilder.Literal(label), CypherBuilder.labels(matchNode));
        });
        const andChecks = CypherBuilder.and(...labelsChecks);
        if (andChecks)
            matchQuery.where(andChecks);
    }
    else {
        matchQuery = new CypherBuilder.Match(matchNode);
    }
    if (whereInput) {
        const whereOp = (0, create_where_predicate_1.createWherePredicate)({
            whereInput,
            element: node,
            context,
            targetElement: matchNode,
        });
        if (whereOp)
            matchQuery.where(whereOp);
    }
    const whereAuth = (0, create_auth_and_params_1.createAuthAndParams)({
        operations: operation,
        entity: node,
        context,
        where: { varName, node },
    });
    if (whereAuth[0]) {
        const authQuery = new CypherBuilder.RawCypher(() => {
            return whereAuth;
        });
        matchQuery.where(authQuery);
    }
    const result = matchQuery.build();
    return result;
}
exports.translateTopLevelMatch = translateTopLevelMatch;
//# sourceMappingURL=translate-top-level-match.js.map