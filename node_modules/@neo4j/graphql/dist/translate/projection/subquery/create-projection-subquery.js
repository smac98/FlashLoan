"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProjectionSubquery = void 0;
const CypherBuilder = __importStar(require("../../cypher-builder/CypherBuilder"));
const create_where_predicate_1 = require("../../where/create-where-predicate");
const create_auth_and_params_1 = require("../../create-auth-and-params");
const constants_1 = require("../../../constants");
const add_sort_and_limit_to_clause_1 = require("./add-sort-and-limit-to-clause");
function createProjectionSubquery({ parentNode, whereInput, node, context, alias, nestedProjection, nestedSubqueries, relationField, relationshipDirection, optionsInput, authValidateStrs, addSkipAndLimit = true, collect = true, }) {
    const isArray = relationField.typeMeta.array;
    const targetNode = new CypherBuilder.NamedNode(alias, {
        labels: node.getLabels(context),
    });
    const relationship = new CypherBuilder.Relationship({
        source: parentNode,
        target: targetNode,
        type: relationField.type,
    });
    if (relationshipDirection === "IN") {
        relationship.reverse();
    }
    const isUndirected = relationshipDirection === "undirected";
    const pattern = relationship.pattern({ directed: !isUndirected });
    const subqueryMatch = new CypherBuilder.Match(pattern);
    const projection = new CypherBuilder.RawCypher((env) => {
        // TODO: use MapProjection
        return `${targetNode.getCypher(env)} ${nestedProjection}`;
    });
    if (whereInput) {
        const wherePredicate = (0, create_where_predicate_1.createWherePredicate)({
            element: node,
            context,
            whereInput,
            targetElement: targetNode,
        });
        if (wherePredicate)
            subqueryMatch.where(wherePredicate);
    }
    const whereAuth = (0, create_auth_and_params_1.createAuthPredicates)({
        entity: node,
        operations: "READ",
        context,
        where: {
            varName: alias,
            node,
        },
    });
    if (whereAuth) {
        subqueryMatch.and(whereAuth);
    }
    const preAuth = (0, create_auth_and_params_1.createAuthPredicates)({
        entity: node,
        operations: "READ",
        context,
        allow: {
            parentNode: node,
            varName: alias,
        },
    });
    if (preAuth) {
        const allowAuth = new CypherBuilder.apoc.ValidatePredicate(CypherBuilder.not(preAuth), constants_1.AUTH_FORBIDDEN_ERROR);
        subqueryMatch.and(allowAuth);
    }
    if (authValidateStrs?.length) {
        const authValidateStatements = authValidateStrs.map((str) => new CypherBuilder.RawCypher(str));
        const authValidatePredicate = CypherBuilder.and(...authValidateStatements);
        const authStatement = new CypherBuilder.apoc.ValidatePredicate(CypherBuilder.not(authValidatePredicate), constants_1.AUTH_FORBIDDEN_ERROR);
        subqueryMatch.and(authStatement);
    }
    const returnVariable = new CypherBuilder.NamedVariable(alias);
    const withStatement = new CypherBuilder.With([projection, returnVariable]); // This only works if nestedProjection is a map
    if (addSkipAndLimit) {
        (0, add_sort_and_limit_to_clause_1.addSortAndLimitOptionsToClause)({
            optionsInput,
            target: returnVariable,
            projectionClause: withStatement,
        });
    }
    let returnProjection = targetNode;
    if (collect) {
        returnProjection = CypherBuilder.collect(targetNode);
        if (!isArray) {
            returnProjection = CypherBuilder.head(returnProjection);
        }
    }
    const returnStatement = new CypherBuilder.Return([returnProjection, returnVariable]);
    const subquery = CypherBuilder.concat(subqueryMatch, ...nestedSubqueries, withStatement, returnStatement);
    return subquery;
}
exports.createProjectionSubquery = createProjectionSubquery;
//# sourceMappingURL=create-projection-subquery.js.map