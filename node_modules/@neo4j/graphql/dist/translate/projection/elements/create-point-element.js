"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CypherBuilder = __importStar(require("../../cypher-builder/CypherBuilder"));
function createPointElement({ resolveTree, field, variable, }) {
    const expression = createPointExpression({ resolveTree, field, variable });
    const cypherClause = new CypherBuilder.RawCypher((env) => {
        return expression.getCypher(env);
    });
    const { cypher } = cypherClause.build("p_");
    return `${resolveTree.alias}: (${cypher})`;
}
exports.default = createPointElement;
function createPointExpression({ resolveTree, field, variable, }) {
    const isArray = field.typeMeta.array;
    const { crs, ...point } = resolveTree.fieldsByTypeName[field.typeMeta.name];
    const dbFieldName = field.dbPropertyName || resolveTree.name;
    const CypherVariable = new CypherBuilder.NamedVariable(variable);
    // Sadly need to select the whole point object due to the risk of height/z
    // being selected on a 2D point, to which the database will throw an error
    let caseResult;
    if (isArray) {
        const projectionVar = new CypherBuilder.Variable();
        const projectionMap = createPointProjectionMap({
            variableOrProperty: projectionVar,
            crs,
            point,
        });
        caseResult = new CypherBuilder.ListComprehension(projectionVar)
            .in(CypherVariable.property(dbFieldName))
            .map(projectionMap);
    }
    else {
        caseResult = createPointProjectionMap({
            variableOrProperty: CypherVariable.property(dbFieldName),
            crs,
            point,
        });
    }
    return new CypherBuilder.Case()
        .when(CypherBuilder.isNotNull(CypherVariable.property(dbFieldName)))
        .then(caseResult)
        .else(CypherBuilder.Null);
}
function createPointProjectionMap({ variableOrProperty, crs, point, }) {
    const projectionMap = new CypherBuilder.Map();
    if (point) {
        projectionMap.set({ point: variableOrProperty });
    }
    if (crs) {
        projectionMap.set({ crs: variableOrProperty.property("crs") });
    }
    return projectionMap;
}
//# sourceMappingURL=create-point-element.js.map