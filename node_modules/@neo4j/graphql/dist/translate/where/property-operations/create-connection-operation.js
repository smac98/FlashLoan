"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConnectionWherePropertyOperation = exports.createConnectionOperation = void 0;
const CypherBuilder = __importStar(require("../../cypher-builder/CypherBuilder"));
const utils_1 = require("../utils");
const list_predicate_to_size_function_1 = require("../list-predicate-to-size-function");
// Recursive function
// eslint-disable-next-line import/no-cycle
const create_where_predicate_1 = require("../create-where-predicate");
const utils_2 = require("../../../utils/utils");
const utils_3 = require("../../cypher-builder/utils/utils");
function createConnectionOperation({ connectionField, value, context, parentNode, operator, }) {
    let nodeEntries;
    if (!connectionField?.relationship.union) {
        nodeEntries = { [connectionField.relationship.typeMeta.name]: value };
    }
    else {
        nodeEntries = value;
    }
    const operations = Object.entries(nodeEntries).map((entry) => {
        const refNode = context.nodes.find((x) => x.name === entry[0] || x.interfaces.some((i) => i.name.value === entry[0]));
        const relationField = connectionField.relationship;
        const childNode = new CypherBuilder.Node({ labels: refNode.getLabels(context) });
        const relationship = new CypherBuilder.Relationship({
            source: relationField.direction === "IN" ? childNode : parentNode,
            target: relationField.direction === "IN" ? parentNode : childNode,
            type: relationField.type,
        });
        const matchPattern = relationship.pattern({
            source: relationField.direction === "IN" ? { variable: true } : { labels: false },
            target: relationField.direction === "IN" ? { labels: false } : { variable: true },
            relationship: { variable: true },
        });
        let listPredicateStr = (0, utils_1.getListPredicate)(operator);
        const contextRelationship = context.relationships.find((x) => x.name === connectionField.relationshipTypeName);
        const whereOperator = createConnectionWherePropertyOperation({
            context,
            whereInput: entry[1],
            edgeRef: relationship,
            targetNode: childNode,
            edge: contextRelationship,
            node: refNode,
        });
        if (listPredicateStr === "any" && !connectionField.relationship.typeMeta.array) {
            listPredicateStr = "single";
        }
        const subquery = new CypherBuilder.RawCypher((env) => {
            const patternStr = matchPattern.getCypher(env);
            const whereStr = (0, utils_3.compileCypherIfExists)(whereOperator, env, {});
            const clause = (0, list_predicate_to_size_function_1.listPredicateToSizeFunction)(listPredicateStr, patternStr, whereStr);
            return [clause, {}];
        });
        return subquery;
    });
    return CypherBuilder.and(...operations);
}
exports.createConnectionOperation = createConnectionOperation;
function createConnectionWherePropertyOperation({ context, whereInput, edgeRef, targetNode, node, edge, }) {
    const params = Object.entries(whereInput).map(([key, value]) => {
        if (key === "AND" || key === "OR") {
            const subOperations = value.map((input) => {
                return createConnectionWherePropertyOperation({
                    context,
                    whereInput: input,
                    edgeRef,
                    targetNode,
                    node,
                    edge,
                });
            });
            if (key === "AND") {
                return CypherBuilder.and(...(0, utils_2.filterTruthy)(subOperations));
            }
            if (key === "OR") {
                return CypherBuilder.or(...(0, utils_2.filterTruthy)(subOperations));
            }
        }
        if (key.startsWith("edge")) {
            const nestedProperties = value;
            const result = (0, create_where_predicate_1.createWherePredicate)({
                targetElement: edgeRef,
                whereInput: nestedProperties,
                context,
                element: edge,
            });
            return result;
        }
        if (key.startsWith("node") || key.startsWith(node.name)) {
            // TODO: improve nodeOn properties generation
            const nodeOnProperties = value._on?.[node.name] || {};
            const nestedProperties = { ...value, ...nodeOnProperties };
            delete nestedProperties._on;
            if (Object.keys(value).length === 1 &&
                value._on &&
                !Object.prototype.hasOwnProperty.call(value._on, node.name)) {
                throw new Error("_on is used as the only argument and node is not present within");
            }
            const result = (0, create_where_predicate_1.createWherePredicate)({
                targetElement: targetNode,
                whereInput: nestedProperties,
                context,
                element: node,
            });
            // NOTE: _NOT is handled by the size()=0
            return result;
        }
        return undefined;
    });
    return CypherBuilder.and(...(0, utils_2.filterTruthy)(params));
}
exports.createConnectionWherePropertyOperation = createConnectionWherePropertyOperation;
//# sourceMappingURL=create-connection-operation.js.map