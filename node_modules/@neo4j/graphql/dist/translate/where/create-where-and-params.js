"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const create_where_predicate_1 = require("./create-where-predicate");
const CypherBuilder = __importStar(require("../cypher-builder/CypherBuilder"));
// TODO: Remove this method and replace for directly using createWherePredicate
/** Wraps createCypherWhereParams with the old interface for compatibility with old way of composing cypher */
function createWhereAndParams({ whereInput, varName, chainStr, node, context, recursing, }) {
    const nodeRef = new CypherBuilder.NamedNode(varName);
    const wherePredicate = (0, create_where_predicate_1.createWherePredicate)({
        element: node,
        context,
        whereInput,
        targetElement: nodeRef,
    });
    const whereCypher = new CypherBuilder.RawCypher((env) => {
        const cypher = wherePredicate?.getCypher(env) || "";
        return [cypher, {}];
    });
    const result = whereCypher.build(`${chainStr || ""}${varName}_`);
    const whereStr = `${!recursing ? "WHERE " : ""}`;
    return [`${whereStr}${result.cypher}`, result.params];
}
exports.default = createWhereAndParams;
//# sourceMappingURL=create-where-and-params.js.map